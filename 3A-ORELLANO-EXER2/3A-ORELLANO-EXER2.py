# -*- coding: utf-8 -*-
"""3A-ORELLANO-EXER2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjXKtH6djTOGiFcfm4BKPirhqx6wAjOm

# **Exercise 1: Introduction to Probability Theory in AI**
"""

def joint_probability(p_A, p_B):
    return p_A * p_B

def marginal_probability(p_A, p_B):
    return p_A + p_B

def conditional_probability(p_A_given_B, p_B):
    return p_A_given_B / p_B

p_A = 0.3
p_B = 0.4
p_A_given_B = 0.7

print(f"Joint probability: {joint_probability(p_A, p_B)}")

"""# **Exercise 2: Decision-Making Under Uncertainty**"""

import numpy as np

import random

def simulate_decision(num_simulations, p_success, reward_success, reward_failure):
    outcomes = []
    for _ in range(num_simulations):
        if random.random() < p_success:
            outcomes.append(reward_success)
        else:
            outcomes.append(reward_failure)
    return sum(outcomes) / num_simulations

p_success = 0.7
reward_success = 1000
reward_failure = -500

average_outcome = simulate_decision(1000, p_success, reward_success, reward_failure)
print(f"Average outcome: ${average_outcome:.2f}")

"""# **Exercise 3: Applying Probability Theory in AI for Diagnosis**"""

def baysesian_inference(prior, likelihood_positive_given_disease, likelihood_positive):
    posterior = (prior * likelihood_positive_given_disease) / likelihood_positive
    return posterior

prior_disease = 0.01
likelihood_positive_given_disease = 0.90
likelihood_positive_given_no_disease = 0.05

likelihood_positive = (likelihood_positive_given_disease * prior_disease) + \
                      (likelihood_positive_given_no_disease * (1 - prior_disease))

posterior_disease = baysesian_inference(prior_disease, likelihood_positive_given_disease, likelihood_positive)
print(f"Posterior probability of disease given a positive test: {posterior_disease:.4f}")

"""# **Exercise 4: Probability Distribution in AI**

"""

import numpy as np
import matplotlib.pyplot as plt

n_trials = 1000
p_head = 0.5
mu, sigma = 0, 1

binomial_distribution = np.random.binomial(n=1, p=p_head, size=n_trials)
normal_distribution = np.random.normal(mu, sigma, n_trials)

fig, axs = plt.subplots(1, 2, figsize=(12, 6))

axs[0].hist(binomial_distribution, bins=2, edgecolor='black')
axs[0].set_title("Binomial Distribution (Coin Flips)")
axs[0].set_xlabel("Outcome")
axs[0].set_ylabel("Frequency")

axs[1].hist(normal_distribution, bins=30, edgecolor='black')
axs[1].set_title("Normal Distribution")
axs[1].set_xlabel("Value")
axs[1].set_ylabel("Frequency")

plt.tight_layout()
plt.show()

"""# **Exercise 5: Real-World Application of Probability in AI**"""

import numpy as np
import matplotlib.pyplot as plt

P_rain = 0.3
P_humidity_given_rain = 0.8
P_humidity_given_no_rain = 0.4
P_cloud_cover_given_rain = 0.9
P_cloud_cover_given_no_rain = 0.2

def bayes_theorem(P_A, P_B_given_A, P_B):
    return (P_B_given_A * P_A) / P_B

def calculate_probability_of_rain(humidity, cloud_cover):
    P_no_rain = 1 - P_rain
    P_humidity = P_humidity_given_rain * P_rain + P_humidity_given_no_rain * P_no_rain
    P_cloud_cover = P_cloud_cover_given_rain * P_rain + P_cloud_cover_given_no_rain * P_no_rain

    P_rain_given_humidity = bayes_theorem(P_rain, P_humidity_given_rain, P_humidity)
    P_rain_given_cloud_cover = bayes_theorem(P_rain, P_cloud_cover_given_rain, P_cloud_cover)


    P_rain_given_evidence = P_rain_given_humidity * P_rain_given_cloud_cover / P_rain
    return P_rain_given_evidence

humidity = float(input("Enter the humidity level (0 to 1): "))
cloud_cover = float(input("Enter the cloud cover level (0 to 1): "))

probability_of_rain = calculate_probability_of_rain(humidity, cloud_cover)
print(f"The probability of rain given the evidence is: {probability_of_rain:.2f}")


humidity_levels = np.linspace(0, 1, 100)
cloud_cover_levels = np.linspace(0, 1, 100)
probabilities = [calculate_probability_of_rain(h, c) for h, c in zip(humidity_levels, cloud_cover_levels)]

plt.plot(humidity_levels, probabilities, label='Probability of Rain')
plt.xlabel('Humidity Level')
plt.ylabel('Probability of Rain')
plt.title('Probability of Rain vs Humidity Level')
plt.legend()
plt.show()